{"ast":null,"code":"var _jsxFileName = \"/Users/chancejacob/Desktop/menu-grabber/dis-menu-grabber/src/components/displayedMenu.js\";\nimport React, { Component } from \"react\";\nlet globalKey = \" \";\n\nfunction isUnique(currentKey) {\n  if (currentKey === globalKey) {\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7\n      },\n      __self: this\n    });\n  } else {\n    globalKey = currentKey;\n    return React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    }, currentKey);\n  }\n}\n\nfunction getMenuItem(currentMenuItem) {\n  let menuItem = {\n    catagory: \"\",\n    name: \"\",\n    description: \"\",\n    price: \"\"\n  };\n\n  if (currentMenuItem.length === 4) {\n    menuItem.catagory = currentMenuItem[0];\n    menuItem.name = currentMenuItem[1];\n    menuItem.description = currentMenuItem[2];\n    menuItem.price = currentMenuItem[3];\n  }\n\n  if (currentMenuItem.length === 3) {\n    menuItem.catagory = currentMenuItem[0];\n    menuItem.name = currentMenuItem[1];\n    menuItem.price = currentMenuItem[3];\n    menuItem.description = \" \";\n  }\n\n  return menuItem;\n}\n\nfunction getAllMenuItems(menuArray) {\n  let menuItems = [];\n  let i = 0;\n\n  while (i < menuArray.length) {\n    let currentMenuItem = menuArray[i];\n    let item = getMenuItem(currentMenuItem);\n    menuItems.push(item);\n    i++;\n  }\n\n  return menuItems;\n}\n\nfunction parseString(menuString) {\n  menuString = menuString.menu;\n  let menuArray = menuString.split(\"###\");\n  let sortedMenuArray = [];\n  let menuItems = [];\n  let i = 1;\n  let keyPointer = -1;\n\n  while (i < menuArray.length) {\n    let currentStr = menuArray[i];\n    let firstChar = currentStr[0];\n\n    if (firstChar === \" \") {\n      let getStr = menuArray[i];\n      let cleanStr = getStr.split(\"/n\");\n      let finalStr = cleanStr[0].trim();\n      sortedMenuArray.push(finalStr);\n      keyPointer += 1;\n    }\n\n    if (firstChar === \"#\") {\n      let dishInfo = [];\n      let currentKey = sortedMenuArray[keyPointer];\n      dishInfo.push(currentKey);\n      let getStr = menuArray[i];\n      let strArray = [];\n      strArray = getStr.split(\"\\n\\n\");\n      let dishName = strArray[0];\n      let dishNameArray = dishName.split(\"#\");\n      dishName = dishNameArray[1];\n      dishName = dishName.trim();\n      dishInfo.push(dishName);\n\n      if (strArray.length === 4) {\n        dishInfo.push(strArray[1]);\n        dishInfo.push(strArray[2]);\n      }\n\n      if (strArray.length === 3) {\n        dishInfo.push(strArray[1]);\n      }\n\n      menuItems.push(dishInfo);\n    }\n\n    i++;\n  }\n\n  menuItems = getAllMenuItems(menuItems);\n  return menuItems; //formattedMenu;\n}\n\nclass DisplayedMenu extends Component {\n  constructor() {\n    super();\n    this.state = {\n      parsedMenu: \"\"\n    };\n  }\n\n  componentWillMount(menu) {\n    menu = this.props.menu; //retrieves json string value\n\n    menu = parseString(menu); // turns json string into jsonArray\n\n    this.setState({\n      parsedMenu: menu\n    }); //attempting to set state to alow for .map()\n  }\n\n  render() {\n    return this.state.parsedMenu.map(menuItem => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, isUnique(menuItem.catagory)), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, menuItem.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, menuItem.description), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, menuItem.price))); //throws error \"TypeError: this.state.parsedMenu.map is not a function\"\n  }\n\n}\n\nexport default DisplayedMenu;","map":{"version":3,"sources":["/Users/chancejacob/Desktop/menu-grabber/dis-menu-grabber/src/components/displayedMenu.js"],"names":["React","Component","globalKey","isUnique","currentKey","getMenuItem","currentMenuItem","menuItem","catagory","name","description","price","length","getAllMenuItems","menuArray","menuItems","i","item","push","parseString","menuString","menu","split","sortedMenuArray","keyPointer","currentStr","firstChar","getStr","cleanStr","finalStr","trim","dishInfo","strArray","dishName","dishNameArray","DisplayedMenu","constructor","state","parsedMenu","componentWillMount","props","setState","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAIC,SAAS,GAAG,GAAhB;;AAEA,SAASC,QAAT,CAAkBC,UAAlB,EAA8B;AAC5B,MAAIA,UAAU,KAAKF,SAAnB,EAA8B;AAC5B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACLA,IAAAA,SAAS,GAAGE,UAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,UAAL,CAAP;AACD;AACF;;AAED,SAASC,WAAT,CAAqBC,eAArB,EAAsC;AACpC,MAAIC,QAAQ,GAAG;AACbC,IAAAA,QAAQ,EAAE,EADG;AAEbC,IAAAA,IAAI,EAAE,EAFO;AAGbC,IAAAA,WAAW,EAAE,EAHA;AAIbC,IAAAA,KAAK,EAAE;AAJM,GAAf;;AAOA,MAAIL,eAAe,CAACM,MAAhB,KAA2B,CAA/B,EAAkC;AAChCL,IAAAA,QAAQ,CAACC,QAAT,GAAoBF,eAAe,CAAC,CAAD,CAAnC;AACAC,IAAAA,QAAQ,CAACE,IAAT,GAAgBH,eAAe,CAAC,CAAD,CAA/B;AACAC,IAAAA,QAAQ,CAACG,WAAT,GAAuBJ,eAAe,CAAC,CAAD,CAAtC;AACAC,IAAAA,QAAQ,CAACI,KAAT,GAAiBL,eAAe,CAAC,CAAD,CAAhC;AACD;;AAED,MAAIA,eAAe,CAACM,MAAhB,KAA2B,CAA/B,EAAkC;AAChCL,IAAAA,QAAQ,CAACC,QAAT,GAAoBF,eAAe,CAAC,CAAD,CAAnC;AACAC,IAAAA,QAAQ,CAACE,IAAT,GAAgBH,eAAe,CAAC,CAAD,CAA/B;AACAC,IAAAA,QAAQ,CAACI,KAAT,GAAiBL,eAAe,CAAC,CAAD,CAAhC;AACAC,IAAAA,QAAQ,CAACG,WAAT,GAAuB,GAAvB;AACD;;AACD,SAAOH,QAAP;AACD;;AAED,SAASM,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,GAAGF,SAAS,CAACF,MAArB,EAA6B;AAC3B,QAAIN,eAAe,GAAGQ,SAAS,CAACE,CAAD,CAA/B;AACA,QAAIC,IAAI,GAAGZ,WAAW,CAACC,eAAD,CAAtB;AACAS,IAAAA,SAAS,CAACG,IAAV,CAAeD,IAAf;AACAD,IAAAA,CAAC;AACF;;AAED,SAAOD,SAAP;AACD;;AAED,SAASI,WAAT,CAAqBC,UAArB,EAAiC;AAC/BA,EAAAA,UAAU,GAAGA,UAAU,CAACC,IAAxB;AAEA,MAAIP,SAAS,GAAGM,UAAU,CAACE,KAAX,CAAiB,KAAjB,CAAhB;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIR,SAAS,GAAG,EAAhB;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIQ,UAAU,GAAG,CAAC,CAAlB;;AAEA,SAAOR,CAAC,GAAGF,SAAS,CAACF,MAArB,EAA6B;AAC3B,QAAIa,UAAU,GAAGX,SAAS,CAACE,CAAD,CAA1B;AACA,QAAIU,SAAS,GAAGD,UAAU,CAAC,CAAD,CAA1B;;AAEA,QAAIC,SAAS,KAAK,GAAlB,EAAuB;AACrB,UAAIC,MAAM,GAAGb,SAAS,CAACE,CAAD,CAAtB;AACA,UAAIY,QAAQ,GAAGD,MAAM,CAACL,KAAP,CAAa,IAAb,CAAf;AACA,UAAIO,QAAQ,GAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,EAAf;AACAP,MAAAA,eAAe,CAACL,IAAhB,CAAqBW,QAArB;AACAL,MAAAA,UAAU,IAAI,CAAd;AACD;;AAED,QAAIE,SAAS,KAAK,GAAlB,EAAuB;AACrB,UAAIK,QAAQ,GAAG,EAAf;AACA,UAAI3B,UAAU,GAAGmB,eAAe,CAACC,UAAD,CAAhC;AACAO,MAAAA,QAAQ,CAACb,IAAT,CAAcd,UAAd;AACA,UAAIuB,MAAM,GAAGb,SAAS,CAACE,CAAD,CAAtB;AACA,UAAIgB,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,GAAGL,MAAM,CAACL,KAAP,CAAa,MAAb,CAAX;AACA,UAAIW,QAAQ,GAAGD,QAAQ,CAAC,CAAD,CAAvB;AACA,UAAIE,aAAa,GAAGD,QAAQ,CAACX,KAAT,CAAe,GAAf,CAApB;AACAW,MAAAA,QAAQ,GAAGC,aAAa,CAAC,CAAD,CAAxB;AACAD,MAAAA,QAAQ,GAAGA,QAAQ,CAACH,IAAT,EAAX;AACAC,MAAAA,QAAQ,CAACb,IAAT,CAAce,QAAd;;AAEA,UAAID,QAAQ,CAACpB,MAAT,KAAoB,CAAxB,EAA2B;AACzBmB,QAAAA,QAAQ,CAACb,IAAT,CAAcc,QAAQ,CAAC,CAAD,CAAtB;AACAD,QAAAA,QAAQ,CAACb,IAAT,CAAcc,QAAQ,CAAC,CAAD,CAAtB;AACD;;AACD,UAAIA,QAAQ,CAACpB,MAAT,KAAoB,CAAxB,EAA2B;AACzBmB,QAAAA,QAAQ,CAACb,IAAT,CAAcc,QAAQ,CAAC,CAAD,CAAtB;AACD;;AACDjB,MAAAA,SAAS,CAACG,IAAV,CAAea,QAAf;AACD;;AACDf,IAAAA,CAAC;AACF;;AACDD,EAAAA,SAAS,GAAGF,eAAe,CAACE,SAAD,CAA3B;AAEA,SAAOA,SAAP,CA/C+B,CA+Cb;AACnB;;AAED,MAAMoB,aAAN,SAA4BlC,SAA5B,CAAsC;AACpCmC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAGD;;AAEDC,EAAAA,kBAAkB,CAAClB,IAAD,EAAO;AACvBA,IAAAA,IAAI,GAAG,KAAKmB,KAAL,CAAWnB,IAAlB,CADuB,CACC;;AACxBA,IAAAA,IAAI,GAAGF,WAAW,CAACE,IAAD,CAAlB,CAFuB,CAEG;;AAC1B,SAAKoB,QAAL,CAAc;AAAEH,MAAAA,UAAU,EAAEjB;AAAd,KAAd,EAHuB,CAGc;AACtC;;AAEDqB,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKL,KAAL,CAAWC,UAAX,CAAsBK,GAAtB,CAA0BpC,QAAQ,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKJ,QAAQ,CAACI,QAAQ,CAACC,QAAV,CAAb,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAID,QAAQ,CAACE,IAAb,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,QAAQ,CAACG,WAAb,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,QAAQ,CAACI,KAAb,CAJF,CADK,CAAP,CADO,CAQH;AACL;;AAvBmC;;AA0BtC,eAAewB,aAAf","sourcesContent":["import React, { Component } from \"react\";\n\nlet globalKey = \" \";\n\nfunction isUnique(currentKey) {\n  if (currentKey === globalKey) {\n    return <h3 />;\n  } else {\n    globalKey = currentKey;\n    return <h3>{currentKey}</h3>;\n  }\n}\n\nfunction getMenuItem(currentMenuItem) {\n  let menuItem = {\n    catagory: \"\",\n    name: \"\",\n    description: \"\",\n    price: \"\"\n  };\n\n  if (currentMenuItem.length === 4) {\n    menuItem.catagory = currentMenuItem[0];\n    menuItem.name = currentMenuItem[1];\n    menuItem.description = currentMenuItem[2];\n    menuItem.price = currentMenuItem[3];\n  }\n\n  if (currentMenuItem.length === 3) {\n    menuItem.catagory = currentMenuItem[0];\n    menuItem.name = currentMenuItem[1];\n    menuItem.price = currentMenuItem[3];\n    menuItem.description = \" \";\n  }\n  return menuItem;\n}\n\nfunction getAllMenuItems(menuArray) {\n  let menuItems = [];\n  let i = 0;\n\n  while (i < menuArray.length) {\n    let currentMenuItem = menuArray[i];\n    let item = getMenuItem(currentMenuItem);\n    menuItems.push(item);\n    i++;\n  }\n\n  return menuItems;\n}\n\nfunction parseString(menuString) {\n  menuString = menuString.menu;\n\n  let menuArray = menuString.split(\"###\");\n  let sortedMenuArray = [];\n  let menuItems = [];\n  let i = 1;\n  let keyPointer = -1;\n\n  while (i < menuArray.length) {\n    let currentStr = menuArray[i];\n    let firstChar = currentStr[0];\n\n    if (firstChar === \" \") {\n      let getStr = menuArray[i];\n      let cleanStr = getStr.split(\"/n\");\n      let finalStr = cleanStr[0].trim();\n      sortedMenuArray.push(finalStr);\n      keyPointer += 1;\n    }\n\n    if (firstChar === \"#\") {\n      let dishInfo = [];\n      let currentKey = sortedMenuArray[keyPointer];\n      dishInfo.push(currentKey);\n      let getStr = menuArray[i];\n      let strArray = [];\n      strArray = getStr.split(\"\\n\\n\");\n      let dishName = strArray[0];\n      let dishNameArray = dishName.split(\"#\");\n      dishName = dishNameArray[1];\n      dishName = dishName.trim();\n      dishInfo.push(dishName);\n\n      if (strArray.length === 4) {\n        dishInfo.push(strArray[1]);\n        dishInfo.push(strArray[2]);\n      }\n      if (strArray.length === 3) {\n        dishInfo.push(strArray[1]);\n      }\n      menuItems.push(dishInfo);\n    }\n    i++;\n  }\n  menuItems = getAllMenuItems(menuItems);\n\n  return menuItems; //formattedMenu;\n}\n\nclass DisplayedMenu extends Component {\n  constructor() {\n    super();\n    this.state = {\n      parsedMenu: \"\"\n    };\n  }\n\n  componentWillMount(menu) {\n    menu = this.props.menu; //retrieves json string value\n    menu = parseString(menu); // turns json string into jsonArray\n    this.setState({ parsedMenu: menu }); //attempting to set state to alow for .map()\n  }\n\n  render() {\n    return this.state.parsedMenu.map(menuItem => (\n      <div>\n        <h3>{isUnique(menuItem.catagory)}</h3>\n        <p>{menuItem.name}</p>\n        <p>{menuItem.description}</p>\n        <p>{menuItem.price}</p>\n      </div>\n    )); //throws error \"TypeError: this.state.parsedMenu.map is not a function\"\n  }\n}\n\nexport default DisplayedMenu;\n"]},"metadata":{},"sourceType":"module"}