{"ast":null,"code":"var _jsxFileName = \"/Users/chancejacob/Desktop/menu-grabber/dis-menu-grabber/src/components/restaurantOptions.js\";\nimport React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport \"react-select/dist/react-select.css\";\nimport DisplayedMenu from \"./displayedMenu\";\nimport \"../style/restaurantOptions.css\";\n\nclass ResturantFinder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange1 = selectedPark => {\n      this.setState({\n        selectedPark\n      });\n    };\n\n    this.handleChange2 = selectedPark => {\n      this.setState({\n        selectedResturant: selectedPark\n      });\n    };\n\n    this.handleChange3 = selectedPeriod => {\n      this.setState({\n        selectedPeriod\n      });\n    };\n\n    this.state = {\n      name: \"React\",\n      selectedPark: {},\n      selectedResturant: {},\n      selectedPeriod: {},\n      grabbedMenu: \"\"\n    };\n  } //handler for reset button to clear the state of all the selectors and displayed menu\n\n\n  resetPage() {\n    this.setState({\n      grabbedMenu: \"\"\n    });\n    this.setState({\n      selectedPark: {}\n    });\n    this.setState({\n      selectedResturant: {}\n    });\n    this.setState({\n      selectedPeriod: {}\n    });\n  } // handler for park select. Save park choice to state for use in POST request\n\n\n  render() {\n    //choices for park selector\n    const parks = [{\n      value: \"magic-kingdom\",\n      label: \"Magic Kingdom\"\n    }, {\n      value: \"hollywood-studios\",\n      label: \"Hollywood Studios\"\n    }, {\n      value: \"epcot\",\n      label: \"Epcot\"\n    }, {\n      value: \"animal-kingdom\",\n      label: \"Animal Kingdom\"\n    }, {\n      value: \"disney-springs\",\n      label: \"Disney Springs\"\n    }];\n    const resturant = [//MagicKingdom Signature Dining Options\n    {\n      value: \"cinderella-royal-table\",\n      label: \"Cinderella's Royal Table\",\n      link: \"magic-kingdom\"\n    }, // Hollywood Singature Dining Options\n    {\n      value: \"hollywood-brown-derby\",\n      label: \"Hollywood Brown Derby\",\n      link: \"hollywood-studios\"\n    }, //Epcot Signature Dining options\n    {\n      value: \"le-cellier-steakhouse\",\n      label: \"Le Cellier Steakhouse\",\n      link: \"epcot\"\n    }, {\n      value: \"monsieur-paul\",\n      label: \"Monsieur Paul\",\n      link: \"epcot\"\n    }, //Animal Kingdom Signature Dining options\n    {\n      value: \"tiffins\",\n      label: \"Tiffins Restaurant\",\n      link: \"animal-kingdom\"\n    }, //Disney Springs Signature Dining options\n    {\n      value: \"boathouse-restaurant\",\n      label: \"Boathouse Restaurant\",\n      link: \"disney-springs\"\n    }, {\n      value: \"jaleo\",\n      label: \"Jaleo by José Andrés\",\n      link: \"disney-springs\"\n    }, {\n      value: \"morimoto-asia\",\n      label: \"Morimoto Asia\",\n      link: \"disney-springs\"\n    }, {\n      value: \"paddlefish\",\n      label: \"Paddlefish\",\n      link: \"disney-springs\"\n    }, {\n      value: \"stk-steakhouse\",\n      label: \"STK Orlando\",\n      link: \"disney-springs\"\n    }, {\n      value: \"wolfgang-puck-bar-and-grill\",\n      label: \"Wolfgang Puck Bar & Grill\",\n      link: \"disney-springs\"\n    }]; //selector for time of meal\n\n    const period = [{\n      value: \"lunch\",\n      label: \"Lunch\"\n    }, {\n      value: \"dinner\",\n      label: \"Dinner\"\n    }]; // Filter restuarant off of link value from park selector\n\n    const filteredOptions = resturant.filter(o => o.link === this.state.selectedPark.value); //Load this if the app has not retrieved a menu yet\n\n    if (this.state.grabbedMenu.length === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, \"Select the Park\"), React.createElement(Select, {\n        name: \"form-field-name\",\n        value: this.state.selectedPark.value,\n        onChange: this.handleChange1,\n        options: parks,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Now Select a Resturant\"), React.createElement(Select, {\n        name: \"form-field-name\",\n        value: this.state.selectedResturant.value,\n        onChange: this.handleChange2,\n        options: filteredOptions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Select a Time\"), React.createElement(Select, {\n        name: \"form-field-name\",\n        value: this.state.selectedPeriod.value,\n        onChange: this.handleChange3,\n        options: period,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"button-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: async () => {\n          let park = this.state.selectedPark.value;\n          let restaurant = this.state.selectedResturant.value;\n          let period = this.state.selectedPeriod.value;\n          const desiredMenu = {\n            park,\n            restaurant,\n            period\n          };\n          const response = await fetch(\"http://127.0.0.1:5000/getMenu\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(desiredMenu)\n          }).then(function (response) {\n            let menu = response.text();\n            return menu;\n          });\n          this.setState({\n            grabbedMenu: JSON.parse(response)\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Fetch Menu\")));\n    } // Load this once menu data has been feteched\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"Select the Park\"), React.createElement(Select, {\n      name: \"form-field-name\",\n      value: this.state.selectedPark.value,\n      onChange: this.handleChange1,\n      options: parks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Now Select a Resturant\"), React.createElement(Select, {\n      name: \"form-field-name\",\n      value: this.state.selectedResturant.value,\n      onChange: this.handleChange2,\n      options: filteredOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Select a Time\"), React.createElement(Select, {\n      name: \"form-field-name\",\n      value: this.state.selectedPeriod.value,\n      onChange: this.handleChange3,\n      options: period,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"button-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.resetPage.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(DisplayedMenu, {\n      menu: this.state.grabbedMenu,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default ResturantFinder;","map":{"version":3,"sources":["/Users/chancejacob/Desktop/menu-grabber/dis-menu-grabber/src/components/restaurantOptions.js"],"names":["React","Component","Select","DisplayedMenu","ResturantFinder","constructor","props","handleChange1","selectedPark","setState","handleChange2","selectedResturant","handleChange3","selectedPeriod","state","name","grabbedMenu","resetPage","render","parks","value","label","resturant","link","period","filteredOptions","filter","o","length","park","restaurant","desiredMenu","response","fetch","method","headers","body","JSON","stringify","then","menu","text","parse","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport \"react-select/dist/react-select.css\";\nimport DisplayedMenu from \"./displayedMenu\";\nimport \"../style/restaurantOptions.css\";\n\nclass ResturantFinder extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"React\",\n      selectedPark: {},\n      selectedResturant: {},\n      selectedPeriod: {},\n      grabbedMenu: \"\"\n    };\n  }\n\n  //handler for reset button to clear the state of all the selectors and displayed menu\n  resetPage() {\n    this.setState({ grabbedMenu: \"\" });\n    this.setState({ selectedPark: {} });\n    this.setState({ selectedResturant: {} });\n    this.setState({ selectedPeriod: {} });\n  }\n  // handler for park select. Save park choice to state for use in POST request\n  handleChange1 = selectedPark => {\n    this.setState({ selectedPark });\n  };\n  // handle and save restuarant selection\n  handleChange2 = selectedPark => {\n    this.setState({ selectedResturant: selectedPark });\n  };\n  // handle and save period selection\n  handleChange3 = selectedPeriod => {\n    this.setState({ selectedPeriod });\n  };\n\n  render() {\n    //choices for park selector\n    const parks = [\n      { value: \"magic-kingdom\", label: \"Magic Kingdom\" },\n      { value: \"hollywood-studios\", label: \"Hollywood Studios\" },\n      { value: \"epcot\", label: \"Epcot\" },\n      { value: \"animal-kingdom\", label: \"Animal Kingdom\" },\n      { value: \"disney-springs\", label: \"Disney Springs\" }\n    ];\n\n    const resturant = [\n      //MagicKingdom Signature Dining Options\n      {\n        value: \"cinderella-royal-table\",\n        label: \"Cinderella's Royal Table\",\n        link: \"magic-kingdom\"\n      },\n      // Hollywood Singature Dining Options\n      {\n        value: \"hollywood-brown-derby\",\n        label: \"Hollywood Brown Derby\",\n        link: \"hollywood-studios\"\n      },\n      //Epcot Signature Dining options\n      {\n        value: \"le-cellier-steakhouse\",\n        label: \"Le Cellier Steakhouse\",\n        link: \"epcot\"\n      },\n      {\n        value: \"monsieur-paul\",\n        label: \"Monsieur Paul\",\n        link: \"epcot\"\n      },\n      //Animal Kingdom Signature Dining options\n      {\n        value: \"tiffins\",\n        label: \"Tiffins Restaurant\",\n        link: \"animal-kingdom\"\n      },\n      //Disney Springs Signature Dining options\n      {\n        value: \"boathouse-restaurant\",\n        label: \"Boathouse Restaurant\",\n        link: \"disney-springs\"\n      },\n      {\n        value: \"jaleo\",\n        label: \"Jaleo by José Andrés\",\n        link: \"disney-springs\"\n      },\n      {\n        value: \"morimoto-asia\",\n        label: \"Morimoto Asia\",\n        link: \"disney-springs\"\n      },\n      {\n        value: \"paddlefish\",\n        label: \"Paddlefish\",\n        link: \"disney-springs\"\n      },\n      {\n        value: \"stk-steakhouse\",\n        label: \"STK Orlando\",\n        link: \"disney-springs\"\n      },\n      {\n        value: \"wolfgang-puck-bar-and-grill\",\n        label: \"Wolfgang Puck Bar & Grill\",\n        link: \"disney-springs\"\n      }\n    ];\n    //selector for time of meal\n    const period = [\n      { value: \"lunch\", label: \"Lunch\" },\n      { value: \"dinner\", label: \"Dinner\" }\n    ];\n\n    // Filter restuarant off of link value from park selector\n    const filteredOptions = resturant.filter(\n      o => o.link === this.state.selectedPark.value\n    );\n\n    //Load this if the app has not retrieved a menu yet\n    if (this.state.grabbedMenu.length === 0) {\n      return (\n        <div>\n          <p>Select the Park</p>\n          <Select\n            name=\"form-field-name\"\n            value={this.state.selectedPark.value}\n            onChange={this.handleChange1}\n            options={parks}\n          />\n          <p>Now Select a Resturant</p>\n          <Select\n            name=\"form-field-name\"\n            value={this.state.selectedResturant.value}\n            onChange={this.handleChange2}\n            options={filteredOptions}\n          />\n          <p>Select a Time</p>\n          <Select\n            name=\"form-field-name\"\n            value={this.state.selectedPeriod.value}\n            onChange={this.handleChange3}\n            options={period}\n          />\n          <div className=\"button-group\">\n            <button\n              onClick={async () => {\n                let park = this.state.selectedPark.value;\n                let restaurant = this.state.selectedResturant.value;\n                let period = this.state.selectedPeriod.value;\n                const desiredMenu = { park, restaurant, period };\n                const response = await fetch(\"http://127.0.0.1:5000/getMenu\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\"\n                  },\n                  body: JSON.stringify(desiredMenu)\n                }).then(function(response) {\n                  let menu = response.text();\n                  return menu;\n                });\n                this.setState({ grabbedMenu: JSON.parse(response) });\n              }}\n            >\n              Fetch Menu\n            </button>\n          </div>\n        </div>\n      );\n    }\n    // Load this once menu data has been feteched\n    return (\n      <div>\n        <p>Select the Park</p>\n        <Select\n          name=\"form-field-name\"\n          value={this.state.selectedPark.value}\n          onChange={this.handleChange1}\n          options={parks}\n        />\n        <p>Now Select a Resturant</p>\n        <Select\n          name=\"form-field-name\"\n          value={this.state.selectedResturant.value}\n          onChange={this.handleChange2}\n          options={filteredOptions}\n        />\n        <p>Select a Time</p>\n        <Select\n          name=\"form-field-name\"\n          value={this.state.selectedPeriod.value}\n          onChange={this.handleChange3}\n          options={period}\n        />\n        <div className=\"button-group\">\n          <button onClick={this.resetPage.bind(this)}>Reset</button>\n        </div>\n        <DisplayedMenu menu={this.state.grabbedMenu} />\n      </div>\n    );\n  }\n}\nexport default ResturantFinder;\n"]},"metadata":{},"sourceType":"module"}